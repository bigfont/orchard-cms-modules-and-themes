@using System.Dynamic;
@using System.Linq;
@using Orchard.ContentManagement;
@using Orchard.Utility.Extensions;
@using LccNetwork.Bootstrap.Extensions;

@{

    // What we have here is basically a list of content type "Work Item"
    // That said, Model.ContentItems is of type ZoneHolding
    // and we want a collection of type "Work Item."
    // So, we cast Model.ContentItems to IEnumerable<dynamic>, so the compiler knows what to do with it
    // and then use Linq to select only its ContentItems
    // and then turn it into a List<dynamic>,
    // and we use dynamic b/c we will be accessing the "Work Item" content parts
    List<dynamic> contentItems =
        (Model.ContentItems as IEnumerable<dynamic>)
        .Select(zh => zh.ContentItem)
        .ToList();

        <ul class="list-unstyled">
            @foreach (dynamic item in contentItems)
            {
                // case the Shape as an IContent, so we can retrieve its display Url
                var itemDisplayUrl = Url.ItemDisplayUrl((IContent)item);
                // get the mainPart, so we can access the Work Item's fields
                var mainPart = MyFunctions.GetMainPartFromContentItem(item);
                // get the fields

                var mediaPart = MyFunctions.GetMediaPartFromMediaLibraryPickerField(mainPart.Image);
                ViewBag.ResizedThumbnailWidth = 200;
                
                // access any parts
                var title = item.TitlePart.Title;
                var body = item.BodyPart.Text;
                // render
                <li>
                    <h3>@title</h3>
                    @Display(BuildDisplay(mediaPart, "ResizedThumbnail"))
                    @Html.Raw(body)
                    <a href="@itemDisplayUrl">Learn More</a>
                </li>
            }
        </ul>
}